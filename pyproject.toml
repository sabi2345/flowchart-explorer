[tool.poetry]
name = "flowchart_explorer"
version = "0.1.0"
description = "FlowChart Explorer is a GitHub-integrated tool that analyzes all execution paths in a flowchart. It helps identify bottlenecks and redundancies in your codebase, providing a new level of clarity and control."
authors = ["sabi2345"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/sabi2345/flowchart-explorer"
packages = [
    { include = "flowchart_explorer" },
    ]
include = ["CHANGELOG.md"]

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
diagrams = "^0.23.4"


[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-mock = "^3.14.0"
pytest-profiling = "^1.7.0"
pytest-cov = "^5.0.0"
pytest-freezer = "^0.4.8"
pre-commit = "^3.7.0"

[tool.poetry.group.docs.dependencies]
Sphinx = "^5.1.1"
pydata-sphinx-theme = "^0.13.3"
myst-nb = "^0.17.1"

[tool.poetry.group.ci]
optional = true # デフォルトではインストールしない
[tool.poetry.group.ci.dependencies]
pytest-azurepipelines = "^1.0.4"

[tool.pytest.ini_options]
testpaths = ['tests']
addopts = '--cov --cov-config=.coveragerc --cov-report=term --cov-report=xml --cov-report=html'
log_cli = false  # ログを有効にしたい場合は true にします
log_cli_level = 'DEBUG'
log_cli_format = "message:%(message)s"
#log_cli_format = "time:%(asctime)s.%(msecs)03d\tthread:%(threadName)s\tlogger:%(name)s\tlevel:%(levelname)s\tmessage:%(message)s"
log_cli_date_format = '%Y-%m-%d %H:%M:%S'
log_file = 'pytest.log'  # ログを出力するファイル名
log_file_level = 'DEBUG'  # ファイルに出力するログのレベル
log_file_format = "message:%(message)s"  # ファイルに出力するログのフォーマット
log_file_date_format = '%Y-%m-%d %H:%M:%S'  # ファイルに出力するログの日付フォーマット

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120

[tool.flake8]
extend-exclude = ['.venv', '.mypy_cache']
max-line-length = 120
extend-ignore = 'E203'
max-complexity = 20

[tool.coverage.run]
branch = true
source = ['flowchart_explorer']

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',
    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
    # Don't complain about type checking
    'if TYPE_CHECKING:',
]
ignore_errors = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
